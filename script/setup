#!/usr/bin/env bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Ensure we're working from the root directory
cd $SCRIPT_DIR && cd ..

# Clean up codespaces environment
if [[ -n "$CODESPACES" ]]; then
  sudo chsh -s $(which zsh)

  rm ~/.zshrc
  mv ~/.gitconfig ~/.gitconfig.old
  rm ~/.gitconfig

  sudo apt-get install -y ripgrep shellcheck fuse npm fzf ruby-dev tmux

  # Use RDM for copy/paste and open support
  wget https://github.com/BlakeWilliams/remote-development-manager/releases/download/v0.0.3/rdm-linux-amd64
  sudo mv rdm-linux-amd64 /usr/bin/local/rdm
  chmod +x /usr/bin/local/rdm

  gh config set browser "rdm open"
fi

function copy_file() {
  local source="$(pwd)/$1"
  local target=$2

  mkdir -p $(dirname "$target")

  if [[ -f $target ]]; then
    if [[ ! -L $target ]]; then
      echo "$target already exists but is not a symlink!"
    else
      echo "$target already exists"
    fi
  else
    ln -svf "$source" "$target"
  fi
}

# Standard dotfiles
copy_file excludes ~/.excludes
copy_file gitconfig ~/.gitconfig
copy_file gitmessage ~/.gitmessage
copy_file gvimrc ~/.gvimrc
copy_file hushlogin ~/.hushlogin
copy_file iex.exs ~/.iex.exs
copy_file ignore ~/.ignore
copy_file inputrc ~/.inputrc
copy_file irbrc ~/.irbrc
copy_file nethackrc ~/.nethackrc
copy_file ripgreprc ~/.ripgreprc
copy_file slashemrc ~/.slashemrc
copy_file tmux.conf ~/.tmux.conf
copy_file tmux.overmind.conf ~/.tmux.overmind.conf
copy_file vimrc ~/.vimrc
copy_file zlogin ~/.zlogin
copy_file zshrc ~/.zshrc

# Bat
copy_file config/bat/config ~/.config/bat/config

# Alacritty
copy_file config/alacritty.yml ~/.config/alacritty.yml

# Neovim
copy_file config/nvim/autoload/plug.vim ~/.config/nvim/autoload/plug.vim
copy_file config/nvim/autocommands.vim ~/.config/nvim/autocommands.vim
copy_file config/nvim/coc-settings.json ~/.config/nvim/coc-settings.json
copy_file config/nvim/coc.vim ~/.config/nvim/coc.vim
copy_file config/nvim/colors.vim ~/.config/nvim/colors.vim
copy_file config/nvim/config.vim ~/.config/nvim/config.vim
copy_file config/nvim/experimental.vim ~/.config/nvim/experimental.vim
copy_file config/nvim/init.vim ~/.config/nvim/init.vim
copy_file config/nvim/plugins.vim ~/.config/nvim/plugins.vim
copy_file config/nvim/shortcuts.vim ~/.config/nvim/shortcuts.vim

# Git template
copy_file git_template/hooks/ctags ~/.git_template/hooks/ctags
copy_file git_template/hooks/post-checkout ~/.git_template/hooks/post-checkout
copy_file git_template/hooks/post-commit ~/.git_template/hooks/post-commit
copy_file git_template/hooks/post-merge ~/.git_template/hooks/post-merge
copy_file git_template/hooks/post-rewrite ~/.git_template/hooks/post-rewrite

# Zsh
copy_file zsh/aliases.zsh ~/.zsh/aliases.zsh
copy_file zsh/fzf.zsh ~/.zsh/fzf.zsh
copy_file zsh/g.zsh ~/.zsh/g.zsh
copy_file zsh/prompt.zsh ~/.zsh/prompt.zsh

# Codespaces nvim install
if [[ -n "$CODESPACES" ]]; then
  # Install the latest neovim
  wget https://github.com/neovim/neovim/releases/download/v0.6.1/nvim.appimage
  chmod u+x nvim.appimage
  sudo mv nvim.appimage /usr/local/bin/nvim

  if ! [ -x "$(command -v npm)" ]; then
    echo 'Could not install node neovim plugin' >&2
  else
    npm install -g neovim
  fi

  if ! [ -x "$(command -v pip3)" ]; then
    echo 'Could not install python neovim plugin' >&2
  else
    pip3 install neovim
  fi

  # Install neovim plugins
  nvim --headless +PlugInstall +qall

  echo 'alias open="rdm open"' >> ~/.zshenv
  echo 'alias xdg-open="rdm open"' >> ~/.zshenv
fi
